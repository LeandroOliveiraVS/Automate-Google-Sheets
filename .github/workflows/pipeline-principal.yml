name: CI/CD - Pipeline Principal

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write 

jobs:
  # --- JOB DE INTEGRAÇÃO CONTÍNUA (TESTES) ---
   ci-testes:
    name: Build e Testes no Contêiner
    runs-on: ubuntu-latest

    env:
      AIRFLOW_UID: 1001

    steps:
      # 1. Baixa o código do repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Constrói a imagem Docker.
      - name: Construir a imagem Docker de teste
        run: docker compose build

      # 3a. Avisar sobre problemas de estilo
      - name: Verificar qualidade do código com Flake8
        run: docker compose run --entrypoint="flake8" airflow-cli . --count --show-source --statistics --exit-zero

      # 3b. Falhar em caso de erros críticos
      - name: Falhar em caso de erros criticos de codigo
        run: |
          docker compose run --rm --entrypoint="flake8" airflow-cli . --count --select=F,E9 --show-source --statistics
      
      # 4.
      - name: Iniciar o banco do airflow.
        run: |
          export AIRFLOW_HOME=$(pwd)/.airflow_test_home
          export AIRFLOW__CORE__EXECUTOR=SequentialExecutor
          export AIRFLOW__CORE__LOAD_EXAMPLES=False
          export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:///${AIRFLOW_HOME}/airflow.db
          airflow db migrate

      # 4. Testa a integridade das DAGs DENTRO de um contêiner temporário
      #    Este comando agora usa o ambiente e o PYTHONPATH definidos no docker-compose.yml
      - name: Testar integridade das DAGs
        run: docker compose run --rm airflow-cli airflow dags list-import-errors

      # 5. Roda os Testes Unitários (Pytest) DENTRO de um contêiner temporário
      - name: Rodar Testes Unitarios com Pytest
        run: docker compose run --rm --entrypoint="pytest" airflow-cli

  # --- JOB DE ENTREGA CONTÍNUA (BUILD DA IMAGEM) ---
   cd-build-imagem:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    needs: ci-testes # Este job só executa se o job 'ci-testes' passar
    if: github.ref == 'refs/heads/main' # Só executa em pushes para a 'main', não em PRs

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # 1. Configura o QEMU para build de múltiplas arquiteturas (boa prática)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 2. Configura o Docker Buildx (ferramenta de build otimizada)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Faz o login no GitHub Container Registry (GHCR)
      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Nome do seu usuário/organização no GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Token secreto gerado automaticamente pelo GitHub

      # 4. Constrói a imagem e envia para o GHCR
      - name: Build e Push da Imagem
        uses: docker/build-push-action@v5
        with:
          context: . # Usa o diretório raiz do projeto como contexto
          push: true # Diz para enviar a imagem após o build
          tags: |
                ghcr.io/leandrooliveiravs/automate-google-sheets:latest
                ghcr.io/leandrooliveiravs/automate-google-sheets:${{ github.sha }}
          # Cria duas tags: 'latest' e uma com o hash do commit (para versionamento)
    